{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport Float64Array from '@stdlib/array-float64';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmax( W ) {\n\tvar buf;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '1IJ8B,Hs', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum. If not provided a value, the accumulator function returns the current maximum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx > max ||\n\t\t\t\t( x === max && isPositiveZero( x ) )\n\t\t\t) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or greater than current maximum value...\n\t\telse if ( isnan( x ) || x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: outgoing value is the current maximum and the new value is less than the maximum, and, thus, we need to find a new maximum among the current values...\n\t\telse if ( ( buf[ i ] === max && x < max ) || isnan( buf[ i ] ) ) {\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current maximum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === max && x === max && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\tmax = x;\n\t\t\t} else if ( isPositiveZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\tmax = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both negative zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the maximum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmax;\n"],"names":["incrmmax","W","buf","max","N","i","isPositiveInteger","TypeError","format","Float64Array","NINF","x","v","k","arguments","length","isnan","isPositiveZero"],"mappings":";;qlBA4DA,SAASA,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAmBL,GACxB,MAAM,IAAIM,UAAWC,EAAQ,WAAYP,IAO1C,OALAC,EAAM,IAAIO,EAAcR,GACxBE,EAAMO,EACNL,GAAK,EACLD,EAAI,EAWJ,SAAsBO,GACrB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAW,IAANX,EACG,KAEDD,EAMR,GAHAE,GAAKA,EAAE,GAAKJ,EAGPG,EAAIH,EACRG,GAAK,GAEJY,EAAOL,IACPA,EAAIR,GACFQ,IAAMR,GAAOc,EAAgBN,MAE/BR,EAAMQ,QAIH,GAAKK,EAAOL,IAAOA,EAAIR,EAC3BA,EAAMQ,OAGF,GAAOT,EAAKG,KAAQF,GAAOQ,EAAIR,GAASa,EAAOd,EAAKG,KAExD,IADAF,EAAMQ,EACAE,EAAI,EAAGA,EAAIZ,EAAGY,IACnB,GAAKA,IAAMR,EAAI,CAEd,GADAO,EAAIV,EAAKW,GACJG,EAAOJ,GAAM,CACjBT,EAAMS,EACN,KACA,EACIA,EAAIT,GAASS,IAAMT,GAAOc,EAAgBL,MAC9CT,EAAMS,EAEP,OAIE,GAAKV,EAAKG,KAAQF,GAAOQ,IAAMR,GAAa,IAANQ,EAC1C,GAAKM,EAAgBN,GACpBR,EAAMQ,OACA,GAAKM,EAAgBf,EAAKG,IAGhC,IADAF,EAAMQ,EACAE,EAAI,EAAGA,EAAIZ,EAAGY,IACnB,GAAKA,IAAMR,GAAKY,EAAgBf,EAAKW,IAAQ,CAC5CV,EAAMD,EAAKW,GACX,KACA,CAQJ,OADAX,EAAKG,GAAMM,EACJR,CACP,CACF"}